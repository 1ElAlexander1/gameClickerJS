================================================================================
Первая версия проекта до гита.  Назову её (v 0.0.1)
Создали -->
#1___/js___//___script.js
Один JS файл, генерирует css html js разметку и всякую муть
#2___/img___//___картинки тупые кроме лого. Камень потом поменяем
#3___/css___//___//___style.css
Стиль для всего проекта 1 css файл
#4___/WorkSpace//___.gitingore + ProjectInfo
#5___//___clicker.html
Один html файл под всё

<= (25.11.2023) =>

До редачили все что можно и решились покорять гит 
(то есть сейчас настоящее время) инит папки щас все сохряняю 
пока не делал нечего не сохранил и не менял проект парился с гитом

(Цели на будущее)
1. Раскидать проект по разным js файлам (по модулям)                 ☐              
2. Убрать CSS из JS                                                  ☐ 
3. Но для начала просто сделать что-то кликабельное и чтобы это жило ☑
4. Научиться работать с  TEXT.MARKDOWN                               ☐

================================================================================
27.11.2023 
Вторая версия проекта  (v 0.0.2)  
#1 Раскидываем проект по модулям  
#2 Изменил функцию проверку сделал чтобы проверка была на еще большие числа 
(сумма денег и опыта)
#3 Убрал лишние закорючки и сделал код чище
---------------------
Цели из прошлого
1. Раскидать проект по разным js файлам (по модулям)                 ☑ 
2. Убрать CSS из JS                                                  ☑ 

================================================================================
30.11.2023
Третья версия проекта (v 0.0.3)
#1   Изменения кода (удаление лишних пробелов) удаление переменных, 
добавление функций в DOM, для обработки действий. 
#1.1 Кнопки покупки имеют теперь не + 1 и + 5. А +1, +10, +100.
#2   Теперь цены не статичные на покупку а имееют растущее значения. 
#2.1 Формула растущей цены : 
Начальная цена + (10, 80, 800 зависимость от кнопки + Сила_Нашего_Клика)
#3   Добавилась новая аббревиатура, по сокращение цены (значения краче K,M ..)
---------------------
Цели на будущее:
1. Создание рабочих, можно в виде блока? чтобы вместить в панель много кого?
Тогда планы каковы?
Идем от малого к большему? Рабочие: 
(в секунду, чтобы запускалась функция которая будет проверять есть ли рабочие?
Если да, то запускает рабочих которые есть. Идея какова:
function startWorkGuys(){
    есть некая переменная, которая будет принимать улучшение, Если я улучшил её
    она будет иметь значение = 1;
    И будет запускаться функция эта что setTimeOut ()1000 
    Но опять же, если я нажму на кнопку, она у меня сразу запустится
    А нам такое не надо =>  по этому будет проходить проверка.
    И так по этапно. Логически:
    1. В функции generateDomElements я прописываю
    div Блок. (контейнер этот) в него создаю li. (он являеется кнопкой)
    2. На это ли вешаю событие клик. 
    Что при нажатие у меня срабатывает другая функция. 
    Из нового js файла который мы создадим, 
    Этот js файл будет создавать новую разметку: что у меня появляется новый 
    блок div при нажатии, который (перекроет магазин) 
    Создам контейнер для заголовкаи вместо магазина у меня
    будет эта вкладка называться  <h1> рабочие:
    Новый контейнер где буду хранить Первых три рабочих (видов)
    В этом блоке будет вот как:
    Негр: +1 (в сек)
    купить price $   Хотя доллар в начале идет в магазинах США но я так хочу
    Разнорабочий: +3 (в сек)
    купить price $
    и т.д. (См. ниже какие професии есть)
    3. И после всех блоков создать блок выхода, чтобы убрать это меню и вернуться на главную.
    

    В ней будет написанно Следу
})
Формула и какие рабочие: 1 блок
1. Негритенок +1  цена 50 += (негр+ сила_рабочих)
2. Разнорабочий +3 цена 120 += (Разнорабочий + сила_рабочих) 
3. TSP +12 цена 420 += (TSP + сила_рабочих)
Блок №2
4. Кузнец +70 цена 1999 += (Кузнец + сила_раб)
5. Шахтер   +390 цена 10999 += (Шахтер + сила_раб)
6. Тротильщик +2480 цена 60999 += (Тротильщик + сила_раб)


================================================================================
04.12.2023
Четвертая версия проекта (v 0.0.4)
#1   Добавление Рабочих: первых трех
#2   Глобальное измение кода!
#2.1 Код по генерации начального дом элементов второй части ушел в функцию 
другого модуля для генерации той части чтобы работала кнопка назад 
в магазине рабочих.
#2.2 Появлися новый CSS style special for table Work Guys!
#2.3 Формулировки некоторых значений были изменены в связи улучшения 
визуального пространства пользователя
#3   Добавлены новые изображения нашего проекта

Цели на будущее: 
1. Добавить еще 3х рабочих и реализовать функционал их покупки
2. После их покупки обновлять таблицу что мы их купили и с таким значением
идет автоматический клик по камню (круто если с визуальным эффектом)
3. Добаить Local Storage для записи данных ключ значение:
----------------------|-----------------------|
Money = "1000"        | Цена на клик 1,10,100 |
PowerClick = "1000"   | Негритенок цена       |
Schet = "1000"        |  TSP ЦЕНА             |
PowerWorkGuys = "1000"|   Разнорабочий цена   |
----------------------|-----------------------|
ИТОГ 10 ключей :\   много. А если в виде объекта все сохранять???
Вопрос интрижный или в виде класс но я с ним не знаком особо на практике, 
лан разберемся и так сам написал весь проект, по сути гуглил только по CSS, 
и как обращаться к родительскому элементу для его удаления. И в целом все.
САМИ!  А если даже и объект то как тогда?
let saveKeysLocalStorage = [{
    money: переменная или же сюда впихивать значение в виде строки или цифр?
}]
интересный конечно моментик (по коду около 500 js, html, css)
================================================================================

Пятая версия проекта (v 0.0.5)
Цели из прошлого: 
#1 Доделать всех рабочих на страницу ☑
#2 Организация авто-клика ☑
================================================================================
================================================================================
================================================================================










Спец. символы  чтобы их потом не искать в браузере.
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
ЦЕЛИ И ЗНАКИ НУЖНЫЕ!!!   использовать через альт если знаешь комбу
☑ 
☐ 
☒
©  знак копирайт
® знак зарегистрированной торговой марки 
™ знак торговой марки 
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Стрелочки

⇑                              ↑
⇔                           ← ↔ →
⇓                            ↵ ↓
… многоточие
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Математика 

≠ неравенство 
± плюс-минус 
¼ одна четвертая 
½ одна вторая 
¾ три четверти 
¹ ² ³ - степени 
√ - корень 
∞ - бесконечность
∑ - сумма
∫ - интеграл
∅ - пустое множество
⊥ - перпендикулярно




\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Для себя
μ - мю  писец проверить бы их
µ микро 
&ensp;	&#8194;	Узкий пробел (еn-шириной в букву n) ========== ☻
&nbsp;	&#160;	Неразрывный пробел =========================== а
&emsp;	&#8195;	Широкий пробел (em-шириной в букву m)========= ♥

          // 1. 3 == 1 K ==                                    1.000 
          // 2. 4 == 10 K ==                                  10.000
          // 3. 5      == 100 K ==                           100.000
          // 4. 6       == 1 M ==                              1.000.000
          // 5. 7        == 10 M ==                           10.000.000
          // 6. 8         == 100 M ==                        100.000.000
          // 7. 9          == 1 Md ==                          1.000.000.000
          // 8. 10          == 10 Md ==                       10.000.000.000
          // 9. 11           == 100 Md ==                    100.000.000.000
        // 10.  12            == 1 B ==                        1.000.000.000.000
        // 11.  13             ==  10 B ==                    10.000.000.000.000
        // 12.  14              == 100 B ==                  100.000.000.000.000
        // 13.  15               == 1 Bd ==                    1.000.000.000.000.000
        // 14.  16                == 10 Bd ==                 10.000.000.000.000.000
        // 15.  17                 == 100 Bd ==              100.000.000.000.000.000
        // 16.     18 == 1 T ==                                1.000.000.000.000.000.000
        // 17.     19 == 10 T ==                              10.000.000.000.000.000.000
        // 18.  1  20                 == 100 T ==            100.000.000.000.000.000.000
        // 19.  1  21                  == 1 Td ==              1.000.000.000.000.000.000.000
        // 20.  1. 22 == 10 Td ==                             10.000.000.000.000.000.000.000
        // 21.  1. 23 == 100 Td ==                           100.000.000.000.000.000.000.000
        // 22.  1. 24 == 1 Q ==                                1.000.000.000.000.000.000.000.000
        // 23.  1. 25 == 10 Q ==                              10.000.000.000.000.000.000.000.000
        // 24.  1. 26 == 100 Q ==                            100.000.000.000.000.000.000.000.000
        // 25.  1. 27 == 1 Qd ==                               1.000.000.000.000.000.000.000.000.000
        // 26.  1. 28 == 10 Qd ==                             10.000.000.000.000.000.000.000.000.000
        // 27.  1. 29 == 100 Qd ==                           100.000.000.000.000.000.000.000.000.000
        // 28.  1. 30 == 1 Qn ==                               1.000.000.000.000.000.000.000.000.000.000
        // 29.  1. 31 == 10 Qn ==                             10.000.000.000.000.000.000.000.000.000.000
        // 30.  1. 32 == 100 Qn =                            100.000.000.000.000.000.000.000.000.000.000
        // 31.  1. 33 == 1 Qnd ==                              1.000.000.000.000.000.000.000.000.000.000.000
        // 32.  1. 34 == 10 Qnd ==                            10.000.000.000.000.000.000.000.000.000.000.000
        // 33.  1. 35 == 100 Qnd ==                          100.000.000.000.000.000.000.000.000.000.000.000
        // 34.  1. 36 == 1 Sxn ==                              1.000.000.000.000.000.000.000.000.000.000.000.000
        // 35.  1. 37 == 1 Sxd ==                             10.000.000.000.000.000.000.000.000.000.000.000.000  
        // 36.  1. 38 == 1 Spn ==                            100.000.000.000.000.000.000.000.000.000.000.000.000
        // 37.  1. 39 == 1 Spd ==                              1.000.000.000.000.000.000.000.000.000.000.000.000.000


        //Export
        (Для меня справка!!)
        Проект когда раскидываем, сначало его экспортим потом импортируем куда надо
        export бывает двух видов сразу или в конце что-то определенное экспортируем
        export {generateDomElements, …}

        Когда экспортим и хотим переименовать экспортируемую функцию, переменную или еще что-то
        пишем export{generateDomElements as genDom, … as  …};

        //Import
        Синтаксис импорта
        import {One, Two} from './file/props/script.js'
        В результате такого импорта в файле куда будет происходить импорт появится локальная переменная
        которые будут содержать значения соответствующие из экспортов

        При импорте переименовываем:
        import {One as First, Two as Second} from './file/props/script.js'
        говорим что переменные ван и ту под именами первый и второй

        Также они могут быть импортированны вместе в виде объекта
        Синтаксис:
        import * as numbers from './file/props/script.js'

        Зведочка говорит что мы хотим экспортировать все экспорты из модуля и поместить их в переменную numbers

        //Дефаолтное экспортирование
        Внутри экспорта может быть много значений и код старается организовать так чтобы каждый модуль делал одну вещь
        в таких ситуациях предусмотрен  ключевое слово-сочетание default такое значение экспортируется фез фигурных скобок

        export default class Person {
            constructor(name) {
                this.name = name
            }
        }

        import Person from './file/props/script.js'

        

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
